AWSTemplateFormatVersion: 2010-09-09

#   --------------------------------------------------------
#   Version History
#
#   v1.0.0  J. Vandenbergen   Initial Version
#   v1.1.0  J. Silva          Enables optional resource installation (SOC integration)
#   --------------------------------------------------------

Description: >-
  v1.0. Script to create Guardduty detector

Metadata: 
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Guardduty"
        Parameters:
          - GuardDutyMasterId

Parameters:
  LogsRetentionInDays:
    Description: 'Specifies the number of days you want to retain CloudTrail log events in the CloudWatch Logs.'
    Type: Number
    Default: 60
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]
  AwsGuardDutyGroupName:
    Type: AWS::SSM::Parameter::Value<String>
    Default: "/org/member/SecLog_guardduty-groupname"
    Description: GuardDuty CloudWatch LogGroup name  
  SecLogMasterAccountId:
    Type: String
    Description: "Contains account id of SecLogMaster"
  EnableSecLogIntegrationFoGuardDutyParam:
    Type: String
    Description: "Enable SecLog integration for GuardDuty?"
    Default: 'true'
    AllowedValues:
    - 'true'
    - 'false'
  OrganizationOuId:
    Description: 'Organizational OU Id'
    Type: String
    Default: "o-jyyw8qs5c8"

Conditions:
  IsSecLogMasterAccount: !Equals
    - !Ref AWS::AccountId
    - !Ref SecLogMasterAccountId
  IsNotSecLogMasterAccount: !Not 
    - !Equals 
      - !Ref AWS::AccountId
      - !Ref SecLogMasterAccountId
  IsSecLogMasterAccountWithSOCIntegration: !And
  - !Equals
    - !Ref AWS::AccountId
    - !Ref SecLogMasterAccountId
  - !Equals
    - !Ref EnableSecLogIntegrationFoGuardDutyParam
    - 'true'

Resources:

  #   -------------------
  #   Enable Put Events on default event bus
  #   -------------------
  
  SecLogEventBusPolicy: 
    Type: AWS::Events::EventBusPolicy
    Condition: IsSecLogMasterAccount
    Properties: 
        Action: "events:PutEvents"
        Principal: "*"
        StatementId: "MyStatement1"
        Condition: 
          Type: "StringEquals"
          Key: "aws:PrincipalOrgID"
          Value: !Ref OrganizationOuId

  GuardDutyDetector:
    Type: AWS::GuardDuty::Detector
    Properties:
        Enable: true
        FindingPublishingFrequency: FIFTEEN_MINUTES

  AWSEventsInvokeEventBusSecLogRole:
    Type: AWS::IAM::Role
    Properties: 
      Description: "Service Linked role to send messages to event bus of seclog account"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: AWSEventsInvokeEventBusSecLog
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: "events:PutEvents"
                Resource: !Join 
                  - ''
                  - - 'arn:aws:events:'
                    - !Sub "eu-west-1:${SecLogMasterAccountId}:"
                    - 'event-bus/default'


  
  # Enable notifications for AWS GuardDuty Rule compliance changes in client account to event bus
  GuardDutyRuleComplianceChangeEvent:
    Type: AWS::Events::Rule
    DependsOn: AWSEventsInvokeEventBusSecLogRole
    Properties:
      Name: SECLZ-GuardDuty-Events-CloudWatch-Rule-To-SecLog
      Description: 'Landing Zone rule to send notification on GuardDuty Events to SecLog eventbus.'
      EventPattern:
        {
          "source": [
            "aws.guardduty"
          ]
        }
      State: ENABLED
      Targets:
      - Id: "CrossAccountTargetId"
        Arn: !Sub "arn:aws:events:eu-west-1:${SecLogMasterAccountId}:event-bus/default"
        RoleArn: 
          Fn::GetAtt: 
          - "AWSEventsInvokeEventBusSecLogRole"
          - "Arn"
  