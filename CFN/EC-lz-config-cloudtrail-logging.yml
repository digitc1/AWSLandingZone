AWSTemplateFormatVersion: 2010-09-09

#   --------------------------------------------------------
#   Version History
#
#   
#   v1.0.0  J. Vandenbergen   Initial Version
#   v1.0.1  J. Vandenbergen   Added description and disabled notifications for all changes
#   v1.0.2  J. Vandenbergen   Added configuration for local SNS topics
#   v1.0.3  L. Leonard        Notification allowed from several organizations
#   v1.1.0  J. Silva          Enables optional resource installation (SOC integration)
#   --------------------------------------------------------

Description: >-
  v1.2. Enables CloudTrail and Config logging to S3 buckets in the logging account

  Prerequisites: 
    - SecLogMaster account exists with central S3-buckets for cloudtrail and config

  Mandatory Input:
    - SecLogMasterAccountId: SecLogMaster account ID
    - NotifyEmail: Email for the security notifications if executed in SecLog account

  Execution:
    - Run in all accounts part of the project

  Creates in all accounts:
    - Cloudtrail: is multiRegion and logs to cloudwatchlogs and S3 in central account
    - Config: config recoderd created, snapshots to central account every 6h and alerts for config rules created
    - SNS: EC-Landing-Zone-Security-Notification topic created if executed in SecLog account
    - ParameterStore: Master AccountId and SNS topic stored in parameter store

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "S3 Buckets"
        Parameters:
          - CloudTrailBucket
          - ConfigBucket
      -
        Label:
          default: "Tags"
        Parameters:
          - Owner
          - Project
          - Environment
          - Criticity
          - DataClassification

Parameters:
  Owner:
      Description: "Tag: owner. Creator or responsible for the project"
      Type: String
      Default: ''

  Environment:
      Description: "Tag: environment. Environnement of the resource (Dev, test, prod etc.)"
      Type: String
      Default: ''

  Criticity:
      Description: "Tag: criticity. Criticity of the application"
      Type: String
      Default: ''

  Project:
      Description: "Tag: project. Name of the application or project"
      Type: String
      Default: 'secLZ'

  DataClassification:
      Description: "Tag: data-classification. Level of criticality of the stored data"
      Type: String
      Default: ''

  SecLogMasterAccountId:
    Description: 'SecLogMaster account ID'
    Type: AWS::SSM::Parameter::Value<String>
    Default: "/org/member/SecLogMasterAccountId"
  OrganizationOuId:
    Description: 'Organizational OU Id'
    Type: AWS::SSM::Parameter::Value<String>
    Default: "/org/member/SecLogOU"
  NotifyEmail:
    Type: AWS::SSM::Parameter::Value<String>
    Description: Email for the security notifications
    Default: "/org/member/SecLog_notification-mail"
  DigitFMB:
    Type: String
    Description: Backup Email for the security notifications
    Default: "DIGIT-CLOUD-LANDING-ZONE@ec.europa.eu"
  CloudtrailKMSarn:
    Type: AWS::SSM::Parameter::Value<String>
    Description: arn for KMS key to encrypt cloudtrail
    Default: "/org/member/KMSCloudtrailKey_arn"
  NotifyDisplayName:
    Type: 'String'
    Default: EC-LZ-Notify
    Description: SNS display name for security administrator(s)
  NotifyTopicName:
    Type: 'String'
    Default: EC-Landing-Zone-Security-Notification
    Description: SNS topic name for security notification
  EnableConfigRuleComplianceChangeAlarm:
    Type: String
    Description: "Enable notifications for AWS Config rule compliance status changes?"
    Default: true
    AllowedValues:
    - true
    - false
  EnableSecLogForCloudTrailParam:
    Type: String
    Description: "Enable SecLog integration for CloudTrail?"
    Default: true
    AllowedValues:
    - true
    - false
  ConfigDeliverySnapshotFrequency:
    Type: String
    Description: "Frequency of config snapshots being delivered to SecLog account"
    Default: Six_Hours
  CloudTrailInsightsLogsGroupName:
    Type: AWS::SSM::Parameter::Value<String>
    Description: CloudTrail Insights CloudWatch LogGroup name
    Default: "/org/member/SecLog_insight-groupname"
  CloudTrailLogGroupName:
    Type: AWS::SSM::Parameter::Value<String>
    Default: '/org/member/SecLog_cloudtrail-groupname'
    Description: Cloudtrail CloudWatch LogGroup name
  AwsConfigLogGroupName:
    Type: AWS::SSM::Parameter::Value<String>
    Default: '/org/member/SecLog_config-groupname'
    Description: AWS config CloudWatch LogGroup name
  LogsRetentionInDays:
    Description: 'Specifies the number of days you want to retain CloudTrail log events in the CloudWatch Logs.'
    Type: Number
    Default: 60
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]
  FirehoseDestinationArn:
    Type: String
    Default: ""
    Description: The ARN of the firehose stream aggregating the logs in the DIGIT C2 Log Aggregation Central Account
#  AccountIdList:
#    Type: AWS::SSM::Parameter::Value<CommaDelimitedList>
#    Default: /org/member/ClientAccountIds
#    Description: "List of client account IDs"

Conditions:
  EnableConfigRuleChangeNotification: !Equals
    - !Ref EnableConfigRuleComplianceChangeAlarm
    - 'true'
  IsSecLogMasterAccount: !Equals
    - !Ref AWS::AccountId
    - !Ref SecLogMasterAccountId
  IsNotSecLogMasterAccount: !Not 
    - !Equals 
      - !Ref AWS::AccountId
      - !Ref SecLogMasterAccountId
  EnableSecLogForCloudTrail: !Equals
  - !Ref EnableSecLogForCloudTrailParam
  - 'true'
  IsSecLogMasterAccountWithSOCIntegration: !And
  - !Equals
    - !Ref AWS::AccountId
    - !Ref SecLogMasterAccountId
  - !Equals
    - !Ref EnableSecLogForCloudTrailParam
    - 'true'
Mappings: {}

Resources:

  #   -------------------
  #   Enable Put Events on default event bus
  #   -------------------

  SecLogEventBusPolicy: 
    Type: AWS::Events::EventBusPolicy
    Condition: IsSecLogMasterAccount
    Properties: 
        Action: "events:PutEvents"
        Principal: "*"
        StatementId: "MyStatement1"
        Condition: 
          Type: "StringEquals"
          Key: "aws:PrincipalOrgID"
          Value: !Ref OrganizationOuId
  
  SecLogEventBusAssumeRole:
    Type: AWS::IAM::Role
    Condition: IsNotSecLogMasterAccount
    Properties:
      RoleName: SLZLinkedAccountSendEventRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: events.amazonaws.com
          Action: sts:AssumeRole
      Description: Role for a linked account to send events to seclog EventBridge default bus
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Sid: SLZPermissionPutEvents
              Effect: Allow
              Action: events:PutEvents
              Resource: !Sub "arn:aws:events:eu-west-1:${SecLogMasterAccountId}:event-bus/default"

  #   -------------------
  #   Enable CloudTrail
  #   -------------------
  
  CloudTrailLogging:
    Type: "AWS::CloudTrail::Trail"
    Properties:
      IncludeGlobalServiceEvents: true
      IsMultiRegionTrail: true
      TrailName: 'lz-cloudtrail-logging'
      S3BucketName: !Sub "cloudtrail-logs-${SecLogMasterAccountId}-do-not-delete"
      KMSKeyId: !Ref CloudtrailKMSarn
      IsLogging: true
      EnableLogFileValidation: true
      CloudWatchLogsLogGroupArn: !GetAtt TrailLogGroup.Arn
      CloudWatchLogsRoleArn: !GetAtt TrailLogGroupRole.Arn

  TrailLogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Retain
    Properties:
      LogGroupName: !Ref CloudTrailLogGroupName
      RetentionInDays: !Ref LogsRetentionInDays

  TrailSubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsSecLogMasterAccountWithSOCIntegration
    Properties:
      DestinationArn: !Ref 'FirehoseDestinationArn'
      FilterPattern: ''
      LogGroupName: !Ref 'TrailLogGroup'


  #   -------------------
  #   Trail Insights
  #   -------------------
  
  TrailInsightsLogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Retain
    Properties:
      LogGroupName: !Ref CloudTrailInsightsLogsGroupName
      RetentionInDays: !Ref LogsRetentionInDays

  TrailInsightsSubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsSecLogMasterAccountWithSOCIntegration
    Properties:
      DestinationArn: !Ref 'FirehoseDestinationArn'
      FilterPattern: ''
      LogGroupName: !Ref 'TrailInsightsLogGroup'


  # Enable Trail Ingisght events to be sent to the corresponding loggroup
  TrailInsightsEventSecLog:
    Type: AWS::Events::Rule
    Properties:
      Name: SECLZ-TrailInsights-Events
      Description: 'Rule to send TrailInsights events to loggroup'
      EventPattern:
        {
          "source": [
            "aws.cloudtrail"
          ],
          "detail-type": [
            "AWS Insight via CloudTrail"
          ]
        }
      State: ENABLED
      Targets:
      - Id: "AwsTrailInsightsCloudWatch-Seclog"
        Arn: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${TrailInsightsLogGroup}"


  #   -------------------
  #   Trail and TrailInsight LogGroup Role
  #   -------------------
        
  TrailLogGroupRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: AssumeRole1
          Effect: Allow
          Principal:
            Service: cloudtrail.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: CIS-cloudtrail-policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Sid: AWSCloudTrailCreateLogStream
            Effect: Allow
            Action: logs:CreateLogStream
            Resource: !GetAtt TrailLogGroup.Arn
          - Sid: AWSCloudTrailPutLogEvents
            Effect: Allow
            Action: logs:PutLogEvents
            Resource: !GetAtt TrailLogGroup.Arn
          - Sid: AWSCloudTrailInsightsCreateLogStream
            Effect: Allow
            Action: logs:CreateLogStream
            Resource: !GetAtt TrailInsightsLogGroup.Arn
          - Sid: AWSCloudTrailInsightsPutLogEvents
            Effect: Allow
            Action: logs:PutLogEvents
            Resource: !GetAtt TrailInsightsLogGroup.Arn

  #   -------------------
  #   Enable Config
  #   -------------------

  
  AwsConfigLogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Retain
    Condition: IsSecLogMasterAccount
    Properties:
      LogGroupName: !Ref AwsConfigLogGroupName
      RetentionInDays: !Ref LogsRetentionInDays

  AwsConfigSubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsSecLogMasterAccountWithSOCIntegration
    Properties:
      DestinationArn: !Ref 'FirehoseDestinationArn'
      FilterPattern: ''
      LogGroupName: !Ref 'AwsConfigLogGroup'

  ConfigRecorder:
    Type: 'AWS::Config::ConfigurationRecorder'
    Properties:
      Name: 'lz-config-logging-recorder'
      RecordingGroup:
        IncludeGlobalResourceTypes: True
        AllSupported: True
      RoleARN: !GetAtt 
      - ConfigRole
      - Arn
  
  DeliveryChannel:
    Type: 'AWS::Config::DeliveryChannel'
    Properties:
      Name: 'lz-config-logging-channel'
      S3BucketName: !Sub "config-logs-${SecLogMasterAccountId}-do-not-delete"
      ConfigSnapshotDeliveryProperties:
        DeliveryFrequency: !Ref ConfigDeliverySnapshotFrequency

  SNSNotificationTopic:
    Type: 'AWS::SNS::Topic'
    Condition: IsSecLogMasterAccount
    Properties:
      DisplayName: !Ref NotifyDisplayName
      TopicName: !Ref NotifyTopicName
      Subscription:
        - Protocol: email
          Endpoint: !Ref NotifyEmail
        - Protocol: email
          Endpoint: !Ref DigitFMB
      # Tags:
      # - Key: Owner
      #   Value: !Ref Owner
      # - Key: Environment
      #   Value: !Ref Environment
      # - Key: Criticity
      #   Value: !Ref Criticity
      # - Key: Project
      #   Value: !Ref Project
      # - Key: DataClassification
      #   Value: !Ref DataClassification
  
  SNSNotificationPolicy:
    Type: 'AWS::SNS::TopicPolicy'
    Condition: IsSecLogMasterAccount
    Properties:
      Topics:
        - !Ref SNSNotificationTopic
      PolicyDocument:
        Id: SNSNotificationTopicPolicy
        Version: 2012-10-17
        Statement:
          - Sid: __default_statement_ID
            Effect: Allow
            Principal:
              AWS: "*"
            Action:
            - SNS:GetTopicAttributes
            - SNS:SetTopicAttributes
            - SNS:AddPermission
            - SNS:RemovePermission
            - SNS:DeleteTopic
            - SNS:Subscribe
            - SNS:ListSubscriptionsByTopic
            - SNS:Publish
            - SNS:Receive
            Resource: !Ref SNSNotificationTopic
            Condition:
              StringEquals:
                AWS:SourceOwner: !Sub ${AWS::AccountId}
          - Sid: AWSSNSPolicy
            Effect: Allow
            Principal:
              AWS: "*"
            Action: sns:Publish
            Resource: !Ref SNSNotificationTopic
            Condition:
              StringLike: 
                aws:PrincipalOrgID : 
                - 'o-jyyw8qs5c8'
                - 'o-xj5nzaqffn'
          - Sid: TrustCWEToPublishEventsToMyTopic
            Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: SNS:Publish
            Resource: !Ref SNSNotificationTopic

  ECLandingZoneSecLogSNSTopicParameter:
    DependsOn:
      - SNSNotificationTopic
    Type: AWS::SSM::Parameter
    Condition: IsSecLogMasterAccount
    Properties:
      Name: '/org/member/SecLog_sns_arn'
      Description: Contains the SNS Topic Arn for Landing Zone
      Type: String
      Value: !Ref SNSNotificationTopic
      # Tags:
      # - Key: Owner
      #   Value: !Ref Owner
      # - Key: Environment
      #   Value: !Ref Environment
      # - Key: Criticity
      #   Value: !Ref Criticity
      # - Key: Project
      #   Value: !Ref Project
      # - Key: DataClassification
      #   Value: !Ref DataClassification

  ECLandingZoneLocalSecLogSNSTopicParameter:
    DependsOn:
      - SNSNotificationTopic
    Type: AWS::SSM::Parameter
    Condition: IsSecLogMasterAccount
    Properties:
      Name: '/org/member/Local_SecLog_sns_arn'
      Description: Contains the SNS Topic Arn for Landing Zone
      Type: String
      Value: 0
      # Tags:
      #   - Key: Owner
      #     Value: !Ref Owner
      #   - Key: Environment
      #     Value: !Ref Environment
      #   - Key: Criticity
      #     Value: !Ref Criticity
      #   - Key: Project
      #     Value: !Ref Project
      #   - Key: DataClassification
      #     Value: !Ref DataClassification

  ECLandingZoneTargetSNSTopicParameter:
    Type: AWS::SSM::Parameter
    Condition: IsNotSecLogMasterAccount
    Properties:
      Name: '/org/member/SecLog_sns_arn'
      Description: Contains the SNS Topic Arn for Landing Zone
      Type: String
      Value: !Sub "arn:aws:sns:${AWS::Region}:${SecLogMasterAccountId}:EC-Landing-Zone-Security-Notification"
      # Tags:
      # - Key: Owner
      #   Value: !Ref Owner
      # - Key: Environment
      #   Value: !Ref Environment
      # - Key: Criticity
      #   Value: !Ref Criticity
      # - Key: Project
      #   Value: !Ref Project
      # - Key: DataClassification
      #   Value: !Ref DataClassification
  

  # Enable notifications for AWS Config Rule compliance changes
  ConfigRuleComplianceChangeEventSecLog:
    Type: AWS::Events::Rule
    Condition: IsSecLogMasterAccount
    Properties:
      Name: SECLZ-Config-Rule-Compliance-Change-CloudWatch-Rule
      Description: 'Landing Zone rule to send notification on Config Rule compliance changes.'
      EventPattern:
        {
          "source": [
            "aws.config"
          ],
          "detail-type": [
            "Config Rules Compliance Change"
          ]
        }
      State: ENABLED
      Targets:
      - Id: "AWS-Landing-Zone-Compliance-Change-Topic"
        Arn: !Ref SNSNotificationTopic
      - Id: "AwsConfigCloudWatch-Seclog"
        Arn: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${AwsConfigLogGroup}"
         

  ConfigRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - config.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSConfigRole'
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 's3:GetBucketAcl'
                Resource: !Join 
                  - ''
                  - - 'arn:aws:s3:::'
                    - !Sub "config-logs-${SecLogMasterAccountId}-do-not-delete"
              - Effect: Allow
                Action: 's3:PutObject'
                Resource: !Join 
                  - ''
                  - - 'arn:aws:s3:::'
                    - !Sub "config-logs-${SecLogMasterAccountId}-do-not-delete"
                    - /AWSLogs/*
                Condition:
                  StringEquals:
                    's3:x-amz-acl': bucket-owner-full-control
              - Effect: Allow
                Action: 'config:Put*'
                Resource: '*'

  

  AWSEventsInvokeEventBusSecLogRole:
    Type: AWS::IAM::Role
    Condition: IsNotSecLogMasterAccount
    Properties: 
      Description: "Service Linked role to send messages to event bus of seclog account"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: AWSEventsInvokeEventBusSecLog
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: "events:PutEvents"
                Resource: !Join 
                  - ''
                  - - 'arn:aws:events:'
                    - !Sub "${AWS::Region}:${SecLogMasterAccountId}:"
                    - 'event-bus/default'

  
  # Enable notifications for AWS Config Rule compliance changes in client account to event bus
  ConfigRuleComplianceChangeEvent:
    Type: AWS::Events::Rule
    Condition: IsNotSecLogMasterAccount
    DependsOn: AWSEventsInvokeEventBusSecLogRole
    Properties:
      Name: SECLZ-Config-Rule-Compliance-Change-CloudWatch-Rule-To-SecLog
      Description: 'Landing Zone rule to send notification on Config Rule compliance changes to SecLog eventbus.'
      EventPattern:
        {
          "source": [
            "aws.config"
          ],
          "detail-type": [
            "Config Rules Compliance Change"
          ]
        }
      State: ENABLED
      Targets:
      - Id: "CrossAccountTargetId"
        Arn: !Sub "arn:aws:events:${AWS::Region}:${SecLogMasterAccountId}:event-bus/default"
        RoleArn: 
          Fn::GetAtt: 
          - "AWSEventsInvokeEventBusSecLogRole"
          - "Arn"

Outputs: {}
