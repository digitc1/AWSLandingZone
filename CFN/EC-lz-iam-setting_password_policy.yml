AWSTemplateFormatVersion: 2010-09-09

#   --------------------------------------------------------
#   Version History
#
#   v1.0    Alexandre LEVRET  Initial Version
#   --------------------------------------------------------

Description: >-
  v1.0. Setting a password policy on the host account for IAM
  Based on the Resident Engineer's work
  - AllowUsersToChangePassword -> true
  - HardExpiry -> false
  - MawPasswordAge (number of days) -> 180
  - MinimumPasswordLength -> 14
  - PasswordReusePrevention -> 24
  - RequireLowercaseCharacters -> true
  - RequireNumbers -> true
  - RequireSymbols -> true
  - RequireUppercaseCharacters -> true

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Tags"
        Parameters:
          - Owner
          - Project
          - Environment
          - Criticity
          - DataClassification

Parameters:
  Owner:
    Description: "Tag: owner. Creator or responsible for the project"
    Type: String
    Default: ''

  Environment:
      Description: "Tag: environment. Environnement of the resource (Dev, test, prod etc.)"
      Type: String
      Default: ''

  Criticity:
      Description: "Tag: criticity. Criticity of the application"
      Type: String
      Default: ''

  Project:
    Description: "Tag: project. Name of the application or project"
    Type: String
    Default: 'secLZ'

  DataClassification:
    Description: "Tag: data-classification. Level of criticality of the stored data"
    Type: String
    Default: ''

  AllowUsersToChangePassword:
    Description: Allow IAM users to use the IAM console to change their own passwords.
    Type: String
    Default: true
    AllowedValues:
    - true
    - false
  HardExpiry:
    Description: Prevent IAM users from choosing a new password after their current password has expired.
    Type: String
    Default: false
    AllowedValues:
    - true
    - false
  MaxPasswordAge:
    Description: Maximum password age (number of days).
    Type: Number
    Default: 180
    ConstraintDescription: Numerical value within the range 0-1095.
    MinValue: 0
    MaxValue: 1095
  MinimumPasswordLength:
    Description: Minimum password length.
    Type: Number
    Default: 14
    ConstraintDescription: Numerical value within the range 6-128.
    MinValue: 6
    MaxValue: 128
  PasswordReusePrevention:
    Description: Prevent IAM users from reusing a specified number of previous passwords.
    Type: Number
    Default: 24
    ConstraintDescription: Numerical value within the range 0-24.
    MinValue: 0
    MaxValue: 24
  RequireLowercaseCharacters:
    Description: IAM password policy requires at least one lowercase letter.
    Type: String
    Default: true
    AllowedValues:
    - true
    - false
  RequireNumbers:
    Description: IAM password policy requires at least one number.
    Type: String
    Default: true
    AllowedValues:
    - true
    - false
  RequireSymbols:
    Description: IAM password policy requires at least one symbol.
    Type: String
    Default: true
    AllowedValues:
    - true
    - false
  RequireUppercaseCharacters:
    Description: IAM password policy requires at least one uppercase letter.
    Type: String
    Default: true
    AllowedValues:
    - true
    - false

Resources:
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                - 'iam:UpdateAccountPasswordPolicy'
                - 'iam:DeleteAccountPasswordPolicy'
                Resource: '*'

  DefineAccountPasswordPolicyFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: !Sub |
          import json
          import boto3
          import cfnresponse
          from botocore.exceptions import ClientError

          def lambda_handler(event, context):
            response_status = cfnresponse.FAILED
            response_data = ''

            if 'RequestType' in event and event['RequestType'] == 'Delete':
              try:
                response_status = cfnresponse.SUCCESS
                response = boto3.client('iam').delete_account_password_policy()
                response_data = response_data + ' Password policy successfully deleted.'
              except ClientError as e:
                raise e
              finally:
                cfnresponse.send(event, context, response_status, {"Response":response_data}, '')
            elif 'RequestType' in event and event['RequestType'] == 'Create':
              try:
                response = boto3.client('iam').update_account_password_policy(
                        AllowUsersToChangePassword = bool(event['ResourceProperties']['AllowUsersToChangePassword']),
                      #  HardExpiry=bool(event['ResourceProperties']['HardExpiry']),
                        MaxPasswordAge=int(event['ResourceProperties']['MaxPasswordAge']),
                        MinimumPasswordLength=int(event['ResourceProperties']['MinimumPasswordLength']),
                        RequireLowercaseCharacters=bool(event['ResourceProperties']['RequireLowercaseCharacters']),
                        RequireNumbers=bool(event['ResourceProperties']['RequireNumbers']),
                        RequireSymbols=bool(event['ResourceProperties']['RequireSymbols']),
                        RequireUppercaseCharacters=bool(event['ResourceProperties']['RequireUppercaseCharacters']),
                        PasswordReusePrevention=int(event['ResourceProperties']['PasswordReusePrevention']))
                response_status = cfnresponse.SUCCESS
                response_data = response_data + ' Password policy successfully created.'
              except ClientError as e:
                raise e
              finally:
                cfnresponse.send(event, context, response_status, {"Response":response_data}, '')
            cfnresponse.send(event, context, response_status, {"Response":response_data}, '')
      Handler: 'index.lambda_handler'
      MemorySize: 128
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.6
      Timeout: 60
      Tags:
      - Key: Owner
        Value: !Ref Owner
      - Key: Environment
        Value: !Ref Environment
      - Key: Criticity
        Value: !Ref Criticity
      - Key: Project
        Value: !Ref Project
      - Key: DataClassification
        Value: !Ref DataClassification

  PasswordPolicy:
    Type: 'Custom::PasswordPolicy'
    Version: '1.0'
    Properties:
      HardExpiry: !Ref HardExpiry
      AllowUsersToChangePassword: !Ref AllowUsersToChangePassword
      MaxPasswordAge: !Ref MaxPasswordAge
      MinimumPasswordLength: !Ref MinimumPasswordLength
      PasswordReusePrevention: !Ref PasswordReusePrevention
      RequireLowercaseCharacters: !Ref RequireLowercaseCharacters
      RequireNumbers: !Ref RequireNumbers
      RequireSymbols: !Ref RequireSymbols
      RequireUppercaseCharacters: !Ref RequireUppercaseCharacters
      ServiceToken: !GetAtt DefineAccountPasswordPolicyFunction.Arn
